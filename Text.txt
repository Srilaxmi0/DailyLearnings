<------------------- DAY 1 ---------------------->
email -- API -- server 

cleint --- > API ---> ecomerce ---> API (email)

client --- >   API ----- > Server ---- > database
react ---->   url ------>  any software (N, E) ----- > mongo db


REST ful API - representational state transfer

www.facebook.com -- > DNS (key, value) (string, ip)
facebook/login
linkdin/profile/ravindranathporandla

API - used for communication or data exchange b/t softwares

hhtp methods

- get
- post
- put 
- delete


hhtp status codes 
- 404 error
- 200 OK successful

1XX - informational 
2XX
3XX
4XX
5XX



backend 

N - NODE
E - EXPRESS

NODE -> 

JS --- > Chrome -   NODE js - (JS(wrapper(((V8 engine) -- C and C++))))
firefox -- monkey 

computer phones -- server

// coding X
// runtime environment -- provided to run js out of webbroweser

react --> node

static - HTML
CSS
JS

WEB application 
--- front   (JS)
--- backend (C, C++, Java, Python)
--- DB  (SQL, ....)



C, C++
Java - C, C++
Python -- C c++
Kotlin - Java



LTS --- Long term support
NODE, Python , jdk

node


npm = ? node package manager (cloud)


node ---> not use this cmd again


tool - express (npm)--- framework js




res ----> calc  <----- res


int add(){

}

add()


65535 - 8081-hhtps\
21 - ftp
localhost:3000/home/profile
127.0.0.1


hot reload -- nodemon

live reload -- off on off on






git init --- .git

staging area -- git add .





---------------- DAY 1 Summary (Backend)--------------------

node js
API - REST (GraphQL)
express
status codes
http methods
start backend server
npm 
nodemon
script
hot reload, live reload
.env
.gitignore
git flow (staging, commit, push)





------------------------------ Day 2 (React) --------------------------------------

React -- library
Angular -- framework

library vs framework
library - tools, packages, no strict rules
framework - strict rules



Plain JS 
--vennila js

DOM

transpiles

React ?
-- companies
-- demand
-- SAP 


--> react fibre ***
--> reconcilation ***

npm - node package manager  (download)
npx - node package execute  (not download)




how to create a basic react application (bundlers)
1. npm create-react-app <app_name>    (.js)
2. npm create vite@latest              (.jsx)   (more preferred)
3. custom react app creation


CRA             vite
webpack        esbuild(dev), rollup(pro)
babel           esbuild, babel



react - priciples 

web application     - react dom
mobile application  - react native


<----------------------- DAY 2 Summary ------------------------------->
- react
- react dom
- react native
- virtual dom
- types of creating react application
- npm vs npx
- CRA vs vite
- client vs server
- react functional component export (rfce)
- useState hook
- react fiber 
- reconsilation
- hydration
- library vs framework
- torrents 
- cloud ?



---------------------- DAY 3 (Summary)---------------------------------

- link(local) vs hyperlink(external)
- axios
- proxy setup
- git and github commands (git init, add, push, origin, status, branch, main vs master)
- connecting backend with frontend
- merge conflit (git and github)





----------------------------------- Day 4 -------------------------------------


node - ?
 open src           - anyone can view , edit, update
 cross platform     - os (mac, ios, andriod, windows, simbion, etc)
 run time env       - js


- REPL 
- Module wrapper - module, require, __filename, __dirname, exports
- new ES6 imports and exports
- package.json : type : "module"  <--- "commonjs"
- path package in node js - basename, parse, normalise, etc

---------------------------------- DAY 5 (System Design basics) ----------------------

- client 
- server
- CDN 
- Load Balancer
- API GateWay
- Polyglot persistance
- Message Queues
- Replication vs Redundancy
- Caching
- Rate Limiting
- DNS
- virtualisation
- docker
- container orchestration
- kubernetes 

-----------------------  DAY 6 --------------------------
- System Design of Twitter
- Fan out architecture
- fan out on read 
- fan out on write
- cloud front (CDN)
- redis (in mem cache)
- kafka (Message Queue)
- Rate Limiters
- Elastic Search
- BLOB - Binary Large Object (S3)
- Cloud Regios ---> Avalability Zones ---> Data Centers ---> Server Rooms ( racks )
- Public Load Balancers vs Service or Internal Load Balancers
- API GateWay


Twitter System Design link on eraser.io : 
https://app.eraser.io/workspace/9BKPlOM1HPaCRJ4gYoww?origin=share


----------------------- DAY 7 (System Design) ---------------------------------

1. What is System Design?
 - larger component -- > smaller components
 - architecture, fullfiling the requirements (funct and non - funct)
 - tradeoffs
 - proper planning
 - iterative process (plan(Design), develop, test, deployment)

2. Performace vs Scalability
 - Performace : how fast your system process for single user
 - Scalability : making your system perform in the same way as having a single user to meet many user requests.

3. Latency vs Throughput
 - Latency : request time - response time
 - Throughput : no.of req / unit time

4. Avalability vs Consistency
 - Avalability - uptime during failure of some components
               - 9's 
                 19s - 90.00%
                 29s - 99.00%
                 59s - 99.999%

 - Consistency - all users should see the same data at the same time

 5. CAP theorem
  - System is expected to have either of C / A at the time of partition at the same time

6. Consistency patterns
 - weak Consistency
 - eventual Consistency
 - strong Consistency

7. Availability patterns
 - 9s
 - parallel vs sequence

8. Fail Over
 - Active - Passive : cold standby, hot standby, floationg IP, master - slave
 - Active - Active : DNS need to know both if public, master - master